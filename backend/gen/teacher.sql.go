// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: teacher.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createTeacher = `-- name: CreateTeacher :one
INSERT INTO teachers (name, family_name, given_name, email, status, expired_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, family_name, given_name, school_id, email, status, created_at, updated_at, expired_at
`

type CreateTeacherParams struct {
	Name       string
	FamilyName sql.NullString
	GivenName  sql.NullString
	Email      sql.NullString
	Status     int32
	ExpiredAt  sql.NullTime
}

func (q *Queries) CreateTeacher(ctx context.Context, arg CreateTeacherParams) (Teacher, error) {
	row := q.db.QueryRowContext(ctx, createTeacher,
		arg.Name,
		arg.FamilyName,
		arg.GivenName,
		arg.Email,
		arg.Status,
		arg.ExpiredAt,
	)
	var i Teacher
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FamilyName,
		&i.GivenName,
		&i.SchoolID,
		&i.Email,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const deleteTeacher = `-- name: DeleteTeacher :one
DELETE FROM teachers
WHERE id = $1
RETURNING id, name, family_name, given_name, school_id, email, status, created_at, updated_at, expired_at
`

func (q *Queries) DeleteTeacher(ctx context.Context, id int64) (Teacher, error) {
	row := q.db.QueryRowContext(ctx, deleteTeacher, id)
	var i Teacher
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FamilyName,
		&i.GivenName,
		&i.SchoolID,
		&i.Email,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getTeacher = `-- name: GetTeacher :one
SELECT id, name, family_name, given_name, school_id, email, status, created_at, updated_at, expired_at FROM teachers
WHERE id = $1
`

func (q *Queries) GetTeacher(ctx context.Context, id int64) (Teacher, error) {
	row := q.db.QueryRowContext(ctx, getTeacher, id)
	var i Teacher
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FamilyName,
		&i.GivenName,
		&i.SchoolID,
		&i.Email,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const listTeachers = `-- name: ListTeachers :many
SELECT id, name, family_name, given_name, school_id, email, status, created_at, updated_at, expired_at FROM teachers
ORDER BY name
`

func (q *Queries) ListTeachers(ctx context.Context) ([]Teacher, error) {
	rows, err := q.db.QueryContext(ctx, listTeachers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Teacher
	for rows.Next() {
		var i Teacher
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.FamilyName,
			&i.GivenName,
			&i.SchoolID,
			&i.Email,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
